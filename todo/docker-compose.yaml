# Определение версии Docker Compose и начало описания сервисов
version: '3.9'

services:
  frontend:
    image: sermalenk/skypro-front:lesson-36
    container_name: frontend
    ports:
      - "80:80"
    depends_on:
      - api

  api:
    # Сборка образа для сервиса django из текущей директории
    build: .
    # Задание имени контейнера для сервиса django
    container_name: api
    # Задание команды, которую нужно запустить при запуске контейнера для сервиса django
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - create_user:/app
    # Открытие порта на хостовой машине и перенаправление на порт в контейнере
    ports:
      - "8000:8000"
    environment:
      SQL_DB_HOST: pgdb
      SQL_DB_PORT: 5432
      SQL_DB_NAME: ${DB_NAME}
      SQL_DB_USER: ${DB_USER}
      SQL_DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
    # Зависимость от другого сервиса
    depends_on:
      pgdb:
        condition: service_healthy

  migrations:
    build:
      context: .
    container_name: migrations
    environment:
      SQL_DB_HOST: pgdb
      SQL_DB_PORT: 5432
      SQL_DB_NAME: ${DB_NAME}
      SQL_DB_USER: ${DB_USER}
      SQL_DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      api:
        condition: service_started
      pgdb:
        condition: service_healthy
    command: python manage.py migrate

  pgdb:
    # Использование готового образа postgres
    image: postgres:15.2
    # Задание переменных окружения для контейнера с postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: always
     # Задание имени контейнера для сервиса pgdb
    container_name: pgdb
     # Связывание тома с директорией в контейнере для сохранения данных postgres
    volumes:
      - pgdb_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SQL_DB_USER} -d ${SQL_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 15

 


volumes:
  pgdb_data:
  frontend:
  
